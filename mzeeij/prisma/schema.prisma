generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model admin {
  id          Int   @id @default(autoincrement())
  userid      Int
  accesslevel Int
 // users       users @relation(fields: [userid], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model users {
  id           Int      @id @default(autoincrement())
  companyname  String
  firstname    String?
  lastname     String?
  username     String?  @unique
  mobile       String?  @unique
  email        String?  @unique
  passwordhash String
  registeredat DateTime @db.Timestamp(6)
  role         String?
  company      company @relation(fields: [companyname], references: [companyname], onDelete: NoAction, onUpdate: NoAction)
  orders       orders[]
}

model company {
  companyname String  @id
  crnum String @unique
  registeredat DateTime @db.Timestamp(6)
  users        users[]
  orders       orders[]
  //admin        admin[]
  supplierCompanies suppliercompany[]
  meta_product  meta_product[]
}

enum StockStatus {
  IN_STOCK
  OUT_OF_STOCK
  RESTOCK_SOON
  COMING_SOON
  DISCONTINUED
}

model meta_product {
  id         Int         @id @default(autoincrement())
  companyname    String
  company      company @relation(fields: [companyname], references: [companyname], onDelete: NoAction, onUpdate: NoAction)
  supplierid  Int?
  supplier      supplier? @relation(fields: [supplierid], references: [id], onDelete: NoAction, onUpdate: NoAction)
  title      String
  summary    String?
  sku        String? //not universal compnay specific
  upc        String? //universal product code
  price      Float
  createdat  DateTime    @db.Timestamp(6)
  updatedat  DateTime?   @db.Timestamp(6)
  estimatedExp  DateTime? //shelf time
  stockstatus   StockStatus @default(IN_STOCK)
  item       item[]
}

model item {
  id        Int     @id @default(autoincrement())
  metaid    Int
  meta_product      meta_product @relation(fields: [metaid], references: [id], onDelete: NoAction, onUpdate: NoAction)
  orderid   Int?
  insertedat  DateTime    @db.Timestamp(6)
  removedat  DateTime?   @db.Timestamp(6)
  location   String
  expiredate  DateTime?
  orders     orders? @relation(fields: [orderid], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model supplier {
  id      Int       @id @default(autoincrement())
  name    String
  phonenumber String?
  address String?
  email   String?
  meta_product  meta_product[]
  supplierCompanies suppliercompany[]
}

model suppliercompany {
  supplierId Int
  supplier   supplier @relation(fields: [supplierId], references: [id])
  companyname String
  company    company @relation(fields: [companyname], references: [companyname])
  @@id([supplierId, companyname])
}

enum OutgoingStatus {
  OUTGOING
  INCOMING
  RETURN
}

enum OrderStatus {
  PENDING
  PAID
  UNPAID
  COMPLETE
}
model orders {
  id                  Int         @id @default(autoincrement())
  companyname         String
  company      company @relation(fields: [companyname], references: [companyname], onDelete: NoAction, onUpdate: NoAction)
  userid              Int
  users       users @relation(fields: [userid], references: [id], onDelete: NoAction, onUpdate: NoAction)
  item  item[] 
  type                OutgoingStatus // TRUE FALSE RETURN
  status              OrderStatus         @default(PENDING)           
  createdat           DateTime    @db.Timestamp(6)
  invoice            invoice?
}

model invoice {
  id                  Int         @id @default(autoincrement())
  orderid              Int       @unique
  orders  orders @relation(fields: [orderid], references: [id], onDelete: NoAction, onUpdate: NoAction)
  subtotal            Float       @default(0) @db.Real
  metaproductdiscount Float?       @default(0) @db.Real
  tax                 Float       @default(0) @db.Real //VAT
  shipping            Float       @default(0) @db.Real
  total               Float       @default(0) @db.Real
  promo               String?
  discount            Float       @default(0) @db.Real
  grandtotal          Float       @default(0) @db.Real
  createdat           DateTime    @db.Timestamp(6)
}



